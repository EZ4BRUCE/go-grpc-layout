// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/xiaohubai/go-grpc-layout/configs"
	"github.com/xiaohubai/go-grpc-layout/internal/biz"
	"github.com/xiaohubai/go-grpc-layout/internal/dao"
	"github.com/xiaohubai/go-grpc-layout/internal/server"
	"github.com/xiaohubai/go-grpc-layout/internal/service"
	"github.com/xiaohubai/go-grpc-layout/pkg/serviceInfo"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(configsServer *configs.Server, configsDao *configs.Dao, registry *configs.Registry, logger log.Logger, serviceInfoServiceInfo *serviceInfo.ServiceInfo) (*kratos.App, func(), error) {
	daoDao, cleanup, err := dao.NewData(configsDao, logger)
	if err != nil {
		return nil, nil, err
	}
	repo := dao.NewDataRepo(daoDao, logger)
	httpUsecase := biz.NewHttpUsecase(repo, logger)
	httpService := service.NewHttpService(httpUsecase, logger)
	httpServer := server.NewHTTPServer(configsServer, httpService, logger)
	grpcUsecase := biz.NewGrpcUsecase(repo, logger)
	grpcService := service.NewGrpcService(grpcUsecase, logger)
	grpcServer := server.NewGRPCServer(configsServer, grpcService, logger)
	registrar := server.NewConsulRegistry(registry)
	app := newApp(logger, httpServer, grpcServer, registrar, serviceInfoServiceInfo)
	return app, func() {
		cleanup()
	}, nil
}
