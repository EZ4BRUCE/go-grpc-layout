// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/xiaohubai/go-grpc-layout/internal/model"
)

func newCasbin(db *gorm.DB, opts ...gen.DOOption) casbin {
	_casbin := casbin{}

	_casbin.casbinDo.UseDB(db, opts...)
	_casbin.casbinDo.UseModel(&model.Casbin{})

	tableName := _casbin.casbinDo.TableName()
	_casbin.ALL = field.NewAsterisk(tableName)
	_casbin.ID = field.NewInt64(tableName, "id")
	_casbin.CreatedAt = field.NewTime(tableName, "created_at")
	_casbin.UpdatedAt = field.NewTime(tableName, "updated_at")
	_casbin.DeletedAt = field.NewField(tableName, "deleted_at")
	_casbin.Ptype = field.NewString(tableName, "ptype")
	_casbin.V0 = field.NewString(tableName, "v0")
	_casbin.V1 = field.NewString(tableName, "v1")
	_casbin.V2 = field.NewString(tableName, "v2")
	_casbin.V3 = field.NewString(tableName, "v3")
	_casbin.V4 = field.NewString(tableName, "v4")
	_casbin.V5 = field.NewString(tableName, "v5")
	_casbin.V6 = field.NewString(tableName, "v6")
	_casbin.V7 = field.NewString(tableName, "v7")
	_casbin.CreateUser = field.NewString(tableName, "create_user")
	_casbin.UpdateUser = field.NewString(tableName, "update_user")

	_casbin.fillFieldMap()

	return _casbin
}

type casbin struct {
	casbinDo casbinDo

	ALL        field.Asterisk
	ID         field.Int64
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	Ptype      field.String
	V0         field.String
	V1         field.String
	V2         field.String
	V3         field.String
	V4         field.String
	V5         field.String
	V6         field.String
	V7         field.String
	CreateUser field.String
	UpdateUser field.String

	fieldMap map[string]field.Expr
}

func (c casbin) Table(newTableName string) *casbin {
	c.casbinDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c casbin) As(alias string) *casbin {
	c.casbinDo.DO = *(c.casbinDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *casbin) updateTableName(table string) *casbin {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Ptype = field.NewString(table, "ptype")
	c.V0 = field.NewString(table, "v0")
	c.V1 = field.NewString(table, "v1")
	c.V2 = field.NewString(table, "v2")
	c.V3 = field.NewString(table, "v3")
	c.V4 = field.NewString(table, "v4")
	c.V5 = field.NewString(table, "v5")
	c.V6 = field.NewString(table, "v6")
	c.V7 = field.NewString(table, "v7")
	c.CreateUser = field.NewString(table, "create_user")
	c.UpdateUser = field.NewString(table, "update_user")

	c.fillFieldMap()

	return c
}

func (c *casbin) WithContext(ctx context.Context) *casbinDo { return c.casbinDo.WithContext(ctx) }

func (c casbin) TableName() string { return c.casbinDo.TableName() }

func (c casbin) Alias() string { return c.casbinDo.Alias() }

func (c *casbin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *casbin) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 15)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["ptype"] = c.Ptype
	c.fieldMap["v0"] = c.V0
	c.fieldMap["v1"] = c.V1
	c.fieldMap["v2"] = c.V2
	c.fieldMap["v3"] = c.V3
	c.fieldMap["v4"] = c.V4
	c.fieldMap["v5"] = c.V5
	c.fieldMap["v6"] = c.V6
	c.fieldMap["v7"] = c.V7
	c.fieldMap["create_user"] = c.CreateUser
	c.fieldMap["update_user"] = c.UpdateUser
}

func (c casbin) clone(db *gorm.DB) casbin {
	c.casbinDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c casbin) replaceDB(db *gorm.DB) casbin {
	c.casbinDo.ReplaceDB(db)
	return c
}

type casbinDo struct{ gen.DO }

func (c casbinDo) Debug() *casbinDo {
	return c.withDO(c.DO.Debug())
}

func (c casbinDo) WithContext(ctx context.Context) *casbinDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c casbinDo) ReadDB() *casbinDo {
	return c.Clauses(dbresolver.Read)
}

func (c casbinDo) WriteDB() *casbinDo {
	return c.Clauses(dbresolver.Write)
}

func (c casbinDo) Session(config *gorm.Session) *casbinDo {
	return c.withDO(c.DO.Session(config))
}

func (c casbinDo) Clauses(conds ...clause.Expression) *casbinDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c casbinDo) Returning(value interface{}, columns ...string) *casbinDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c casbinDo) Not(conds ...gen.Condition) *casbinDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c casbinDo) Or(conds ...gen.Condition) *casbinDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c casbinDo) Select(conds ...field.Expr) *casbinDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c casbinDo) Where(conds ...gen.Condition) *casbinDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c casbinDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *casbinDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c casbinDo) Order(conds ...field.Expr) *casbinDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c casbinDo) Distinct(cols ...field.Expr) *casbinDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c casbinDo) Omit(cols ...field.Expr) *casbinDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c casbinDo) Join(table schema.Tabler, on ...field.Expr) *casbinDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c casbinDo) LeftJoin(table schema.Tabler, on ...field.Expr) *casbinDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c casbinDo) RightJoin(table schema.Tabler, on ...field.Expr) *casbinDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c casbinDo) Group(cols ...field.Expr) *casbinDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c casbinDo) Having(conds ...gen.Condition) *casbinDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c casbinDo) Limit(limit int) *casbinDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c casbinDo) Offset(offset int) *casbinDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c casbinDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *casbinDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c casbinDo) Unscoped() *casbinDo {
	return c.withDO(c.DO.Unscoped())
}

func (c casbinDo) Create(values ...*model.Casbin) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c casbinDo) CreateInBatches(values []*model.Casbin, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c casbinDo) Save(values ...*model.Casbin) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c casbinDo) First() (*model.Casbin, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Casbin), nil
	}
}

func (c casbinDo) Take() (*model.Casbin, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Casbin), nil
	}
}

func (c casbinDo) Last() (*model.Casbin, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Casbin), nil
	}
}

func (c casbinDo) Find() ([]*model.Casbin, error) {
	result, err := c.DO.Find()
	return result.([]*model.Casbin), err
}

func (c casbinDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Casbin, err error) {
	buf := make([]*model.Casbin, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c casbinDo) FindInBatches(result *[]*model.Casbin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c casbinDo) Attrs(attrs ...field.AssignExpr) *casbinDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c casbinDo) Assign(attrs ...field.AssignExpr) *casbinDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c casbinDo) Joins(fields ...field.RelationField) *casbinDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c casbinDo) Preload(fields ...field.RelationField) *casbinDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c casbinDo) FirstOrInit() (*model.Casbin, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Casbin), nil
	}
}

func (c casbinDo) FirstOrCreate() (*model.Casbin, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Casbin), nil
	}
}

func (c casbinDo) FindByPage(offset int, limit int) (result []*model.Casbin, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c casbinDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c casbinDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c casbinDo) Delete(models ...*model.Casbin) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *casbinDo) withDO(do gen.Dao) *casbinDo {
	c.DO = *do.(*gen.DO)
	return c
}
